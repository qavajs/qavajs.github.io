"use strict";(self.webpackChunkqava_docs=self.webpackChunkqava_docs||[]).push([[6261],{207:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Guides/memory","title":"Test Data Management","description":"The @qavajs/memory module provides powerful capabilities to store, retrieve, and manipulate variables between test steps. This allows you to create more dynamic and data-driven test scenarios.","source":"@site/versioned_docs/version-2x/Guides/memory.mdx","sourceDirName":"Guides","slug":"/Guides/memory","permalink":"/docs/Guides/memory","draft":false,"unlisted":false,"editUrl":"https://github.com/qavajs/qavajs.github.io/tree/main/versioned_docs/version-2x/Guides/memory.mdx","tags":[],"version":"2x","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"sidebar","previous":{"title":"Guides","permalink":"/docs/category/guides"},"next":{"title":"Page Object Model","permalink":"/docs/Guides/page-object"}}');var t=a(4848),s=a(8453),l=a(1470),o=a(9365);const i={sidebar_position:1},c="Test Data Management",u={},d=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Memory API",id:"memory-api",level:2},{value:"Using the Memory Value Parameter Type",id:"using-the-memory-value-parameter-type",level:3},{value:"Direct Memory Access in Custom Steps",id:"direct-memory-access-in-custom-steps",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Constants and Computed Values",id:"constants-and-computed-values",level:3},{value:"String Interpolation",id:"string-interpolation",level:3},{value:"Built-in JavaScript Execution with $js",id:"built-in-javascript-execution-with-js",level:3},{value:"Escaping the $ Symbol",id:"escaping-the--symbol",level:3},{value:"Parallel Execution Support",id:"parallel-execution-support",level:3},{value:"Best Practices",id:"best-practices",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"test-data-management",children:"Test Data Management"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@qavajs/memory"})," module provides powerful capabilities to store, retrieve, and manipulate variables between test steps. This allows you to create more dynamic and data-driven test scenarios."]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.p,{children:"Memory allows you to save values during test execution and reference them later:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"When I save text of 'Answer' as 'userAnswer'\nThen I expect text of 'Another Answer' to equal '$userAnswer'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"memory-api",children:"Memory API"}),"\n",(0,t.jsx)(n.h3,{id:"using-the-memory-value-parameter-type",children:"Using the Memory Value Parameter Type"}),"\n",(0,t.jsx)(n.p,{children:"All built-in steps can consume memory params."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"Then I expect text of 'Title' to equal '$userAnswer'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"value"})," parameter type provides a strongly-typed API to access memory and can be used in custom step:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Reading from memory\nWhen('Read memory {value}', async function(memoryValue) {\n    // memoryValue.value() retrieves the actual value from memory\n    expect(memoryValue.value()).to.equal('stored value');\n});\n\n// Writing to memory\nWhen('Set memory {value} as {string}', async function(memoryKey, value) {\n    // memoryKey.set() stores a value in memory\n    memoryKey.set(value);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"direct-memory-access-in-custom-steps",children:"Direct Memory Access in Custom Steps"}),"\n",(0,t.jsx)(n.p,{children:"You can also access the memory object directly in your step definitions:"}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(o.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const memory = require('@qavajs/memory');\n\nWhen(/^I save value '(.+)' as '(.+)'$/, async function (value, key) {\n    memory.setValue(key, value);\n});\n\nThen(/^value in '(.+)' should equal '(.+)'$/, async function (variable, expectedValue) {\n    const actualValue = memory.getValue(variable);\n    expect(actualValue).to.equal(expectedValue);\n});\n"})})}),(0,t.jsx)(o.A,{value:"ts",label:"TypeScript",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import memory from '@qavajs/memory';\n\nWhen(/^I save value '(.+)' as '(.+)'$/, async function (value: string, key: string) {\n    memory.setValue(key, value);\n});\n\nThen(/^value in '(.+)' should equal '(.+)'$/, async function (variable: string, expectedValue: string) {\n    const actualValue = memory.getValue(variable);\n    expect(actualValue).to.equal(expectedValue);\n});\n"})})})]}),"\n",(0,t.jsxs)(n.p,{children:["In your Gherkin scenarios, you can access previously saved variables using the ",(0,t.jsx)(n.code,{children:"$"})," prefix:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"When I save value '42' as 'myNumber'\nThen value in 'myNumber' should equal '42'\nAnd I expect text of 'Result Field' to equal '$myNumber'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,t.jsx)(n.h3,{id:"constants-and-computed-values",children:"Constants and Computed Values"}),"\n",(0,t.jsx)(n.p,{children:"You can define constant values and computed functions that can be referenced in your feature files:"}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(o.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// memory.js\nmodule.exports = {\n    // Constants\n    maxRetries: 3,\n    baseUrl: 'https://example.com',\n    \n    // Computed values (functions that return dynamic values)\n    timestamp: function() {\n        return Date.now();\n    },\n    randomUsername: function() {\n        return 'user_' + Math.floor(Math.random() * 10000);\n    }\n};\n"})})}),(0,t.jsx)(o.A,{value:"ts",label:"TypeScript",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// memory.ts\nexport default {\n    // Constants\n    maxRetries: 3,\n    baseUrl: 'https://example.com',\n    \n    // Computed values (functions that return dynamic values)\n    timestamp: function() {\n        return Date.now();\n    },\n    randomUsername: function() {\n        return 'user_' + Math.floor(Math.random() * 10000);\n    }\n};\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"Reference these values in your Gherkin scenarios:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"# Using constants\nThen I expect retry count to be '$maxRetries'\nWhen I navigate to '$baseUrl/login'\n\n# Using computed values\nThen I expect registration timestamp to be '$timestamp()'\nWhen I register with username '$randomUsername()'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"string-interpolation",children:"String Interpolation"}),"\n",(0,t.jsx)(n.p,{children:"Use curly braces to interpolate memory values within strings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"When I save '42' as 'score'\nThen I expect text of 'Result' to equal 'Your score is {$score} points'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"built-in-javascript-execution-with-js",children:"Built-in JavaScript Execution with $js"}),"\n",(0,t.jsxs)(n.p,{children:["Use the built-in ",(0,t.jsx)(n.code,{children:"$js"})," computed function to execute JavaScript code directly from your Gherkin scenarios:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"# Math operations\nWhen I expect the result to equal '$js(42 * 2.5)'\n\n# String manipulation\nThen I expect the username to be '$js(\"user_\" + Math.floor(Math.random() * 1000))'\n\n# Date formatting\nAnd I expect the date format to be '$js(new Date().toLocaleDateString())'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"escaping-the--symbol",children:"Escaping the $ Symbol"}),"\n",(0,t.jsxs)(n.p,{children:["When you need to use a literal ",(0,t.jsx)(n.code,{children:"$"})," character in your tests, escape it with a double backslash:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"When I expect the price to be '\\\\$42.99'\n# This will expect the actual text to be \"$42.99\"\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parallel-execution-support",children:"Parallel Execution Support"}),"\n",(0,t.jsxs)(n.p,{children:["For parallel test execution, you can assign unique values for each Cucumber thread using the ",(0,t.jsx)(n.code,{children:"parallel"})," function:"]}),"\n",(0,t.jsxs)(l.A,{children:[(0,t.jsx)(o.A,{value:"js",label:"JavaScript",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const { parallel } = require('@qavajs/memory/utils');\n\nclass Memory {\n    // Each parallel thread will get a different user from this array\n    testUser = parallel([\n        { username: 'user1@example.com', password: 'password1' },\n        { username: 'user2@example.com', password: 'password2' },\n        { username: 'user3@example.com', password: 'password3' }\n    ]);\n    \n    // You can also use parallel with primitive values\n    port = parallel([8080, 8081, 8082]);\n}\n\nmodule.exports = Memory;\n"})})}),(0,t.jsx)(o.A,{value:"ts",label:"TypeScript",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { parallel } from '@qavajs/memory/utils';\n\nexport class Memory {\n    // Each parallel thread will get a different user from this array\n    testUser = parallel([\n        { username: 'user1@example.com', password: 'password1' },\n        { username: 'user2@example.com', password: 'password2' },\n        { username: 'user3@example.com', password: 'password3' }\n    ]);\n    \n    // You can also use parallel with primitive values\n    port = parallel([8080, 8081, 8082]);\n}\n"})})})]}),"\n",(0,t.jsx)(n.p,{children:"Use these values in your scenarios:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-gherkin",children:"When I login with username '$testUser.username' and password '$testUser.password'\nAnd I connect to port '$port'\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use descriptive names"})," for your memory variables to make scenarios more readable"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prefer string interpolation"})," for complex strings rather than concatenating multiple parts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Create reusable computed functions"})," for common operations or data generation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Use TypeScript interfaces"})," to define the structure of complex memory objects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document memory constants and functions"})," for better team collaboration"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},9365:(e,n,a)=>{a.d(n,{A:()=>l});a(6540);var r=a(4164);const t={tabItem:"tabItem_Ymn6"};var s=a(4848);function l({children:e,hidden:n,className:a}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(t.tabItem,a),hidden:n,children:e})}},1470:(e,n,a)=>{a.d(n,{A:()=>I});var r=a(6540),t=a(4164),s=a(7559),l=a(3104),o=a(6347),i=a(205),c=a(7485),u=a(1682),d=a(679);function m(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return m(e).map((({props:{value:e,label:n,attributes:a,default:r}})=>({value:e,label:n,attributes:a,default:r})))}(a);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function h({value:e,tabValues:n}){return n.some((n=>n.value===e))}function v({queryString:e=!1,groupId:n}){const a=(0,o.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(t),(0,r.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(a.location.search);n.set(t,e),a.replace({...a.location,search:n.toString()})}),[t,a])]}function x(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,s=p(e),[l,o]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,u]=v({queryString:a,groupId:t}),[m,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,t]=(0,d.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:t}),y=(()=>{const e=c??m;return h({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{y&&o(y)}),[y]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)}),[u,x,s]),tabValues:s}}var y=a(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=a(4848);function b({className:e,block:n,selectedValue:a,selectValue:r,tabValues:s}){const o=[],{blockElementScrollPositionUntilNextRender:i}=(0,l.a_)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),l=s[t].value;l!==a&&(i(n),r(l))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=o.indexOf(e.currentTarget)+1;n=o[a]??o[0];break}case"ArrowLeft":{const a=o.indexOf(e.currentTarget)-1;n=o[a]??o[o.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:s.map((({value:e,label:n,attributes:r})=>(0,g.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{o.push(e)},onKeyDown:u,onClick:c,...r,className:(0,t.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":a===e}),children:n??e},e)))})}function j({lazy:e,children:n,selectedValue:a}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function w(e){const n=x(e);return(0,g.jsxs)("div",{className:(0,t.A)(s.G.tabs.container,"tabs-container",f.tabList),children:[(0,g.jsx)(b,{...n,...e}),(0,g.jsx)(j,{...n,...e})]})}function I(e){const n=(0,y.A)();return(0,g.jsx)(w,{...e,children:m(e.children)},String(n))}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>o});var r=a(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);