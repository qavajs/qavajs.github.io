"use strict";(self.webpackChunkqava_docs=self.webpackChunkqava_docs||[]).push([[4269],{7144:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Guides/cicd","title":"CI/CD","description":"qavajs, is CI/CD agnostic and can be executed in any environment that satisfies following requirements:","source":"@site/versioned_docs/version-2x/Guides/cicd.md","sourceDirName":"Guides","slug":"/Guides/cicd","permalink":"/docs/Guides/cicd","draft":false,"unlisted":false,"editUrl":"https://github.com/qavajs/qavajs.github.io/tree/main/versioned_docs/version-2x/Guides/cicd.md","tags":[],"version":"2x","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"sidebar","previous":{"title":"Typescript","permalink":"/docs/Guides/typescript"},"next":{"title":"Cloud Providers","permalink":"/docs/Guides/cloud-providers"}}');var a=s(4848),i=s(8453);const r={sidebar_position:6},o="CI/CD",l={},p=[{value:"General Approach for qavajs in CI/CD:",id:"general-approach-for-qavajs-in-cicd",level:2},{value:"GitHub Actions",id:"github-actions",level:2},{value:"Azure DevOps Pipelines",id:"azure-devops-pipelines",level:2},{value:"GitLab CI/CD",id:"gitlab-cicd",level:2},{value:"Jenkins",id:"jenkins",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"cicd",children:"CI/CD"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"qavajs"}),", is CI/CD agnostic and can be executed in any environment that satisfies following requirements:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://nodejs.org/en",children:"nodejs"})," > 20"]}),"\n",(0,a.jsx)(n.li,{children:"installed browsers (for UI testing)"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"general-approach-for-qavajs-in-cicd",children:"General Approach for qavajs in CI/CD:"}),"\n",(0,a.jsx)(n.p,{children:"The core idea for integrating qavajs into any CI/CD pipeline is to execute a command that runs your qavajs tests. This usually involves:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Checkout Code: Get your qavajs project from the repository."}),"\n",(0,a.jsx)(n.li,{children:"Install Dependencies: Run npm install (or yarn install) to install all project dependencies, including qavajs and its related packages."}),"\n",(0,a.jsx)(n.li,{children:"Set up Environment (if needed): Configure any environment variables required for your tests (e.g., BASE_URL, API keys)."}),"\n",(0,a.jsx)(n.li,{children:"Run Tests: Execute the qavajs test command, typically defined in your package.json scripts (e.g., npm test)."}),"\n",(0,a.jsx)(n.li,{children:"Generate Reports: Configure qavajs to generate reports (e.g., HTML, JUnit XML) that can be published or viewed within the CI/CD system."}),"\n",(0,a.jsx)(n.li,{children:"Publish Test Results (optional but recommended): Upload generated reports to the CI/CD platform's test reporting features for better visibility."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,a.jsx)(n.p,{children:"GitHub Actions uses YAML files (.github/workflows/*.yml) to define workflows."}),"\n",(0,a.jsx)(n.p,{children:"Example qavajs-tests.yml workflow:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"name: qavajs E2E Tests\n\non:\n  workflow-dispatch:\n\njobs:\n  run-qavajs-tests:\n    runs-on: ubuntu-latest # Or windows-latest, macos-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '22' # Use your preferred Node.js version\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Install Google Chrome (for UI tests)\n        run: |\n          sudo apt-get update\n          sudo apt-get install -y google-chrome-stable\n\n      - name: Run qavajs tests\n        run: npm test # Or whatever script you define in package.json to run your qavajs tests\n        env:\n          # Example of setting environment variables\n          # BASE_URL: ${{ secrets.BASE_URL }}\n          # Some other variable: 'value'\n\n      - name: Upload test results (e.g., JUnit XML)\n        if: always() # Run this step even if previous steps fail\n        uses: actions/upload-artifact@v4\n        with:\n          name: qavajs-test-results\n          path: ./reports/junit-report.xml # Adjust path to your generated report\n"})}),"\n",(0,a.jsx)(n.h2,{id:"azure-devops-pipelines",children:"Azure DevOps Pipelines"}),"\n",(0,a.jsx)(n.p,{children:"Azure DevOps uses YAML files (azure-pipelines.yml) for pipelines."}),"\n",(0,a.jsx)(n.p,{children:"Example azure-pipelines.yml:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"trigger:\n- main\n- develop\n\npool:\n  vmImage: 'ubuntu-latest' # Or 'windows-latest', 'macOS-latest'\n\nsteps:\n- task: NodeTool@0\n  inputs:\n    versionSpec: '22.x' # Use your preferred Node.js version\n  displayName: 'Install Node.js'\n\n- script: |\n    npm install\n  displayName: 'Install Dependencies'\n\n- script: |\n    sudo apt-get update\n    sudo apt-get install -y google-chrome-stable\n  displayName: 'Install Google Chrome'\n  condition: eq(variables['Agent.OS'], 'Linux') # Only run on Linux agents\n\n- script: |\n    npm test # Or your qavajs test command\n  displayName: 'Run qavajs Tests'\n  env:\n    # Example of setting environment variables\n    # BASE_URL: $(BASE_URL) # Use pipeline variables or variable groups\n    # Some other variable: 'value'\n\n- task: PublishTestResults@2\n  inputs:\n    testResultsFormat: 'JUnit'\n    testResultsFiles: '**/junit-report.xml' # Adjust path to your generated report\n    mergeResults: true\n    failTaskOnFailedTests: true # Fail the pipeline if tests fail\n  displayName: 'Publish Test Results'\n\n- task: PublishBuildArtifacts@1\n  inputs:\n    pathToPublish: 'reports' # Path to your reports directory\n    artifactName: 'qavajsTestReports'\n  displayName: 'Publish qavajs Reports'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"gitlab-cicd",children:"GitLab CI/CD"}),"\n",(0,a.jsx)(n.p,{children:"GitLab CI/CD uses a .gitlab-ci.yml file at the root of your repository."}),"\n",(0,a.jsx)(n.p,{children:"Example .gitlab-ci.yml:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'stages:\n  - test\n\nvariables:\n  # Example of setting global environment variables\n  # BASE_URL: "http://your-app.com"\n\ntest_qavajs:\n  stage: test\n  image: node:22 # Use a Node.js image\n  before_script:\n    - apt-get update && apt-get install -y google-chrome-stable # Install Chrome if needed\n    - npm install\n  script:\n    - npm test # Your qavajs test command\n  artifacts:\n    when: always\n    reports:\n      junit: "**/junit-report.xml" # Path to your JUnit report\n    paths:\n      - reports/ # Path to your reports directory (e.g., HTML reports)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"jenkins",children:"Jenkins"}),"\n",(0,a.jsx)(n.p,{children:"Jenkins uses a Jenkinsfile (Groovy script) for Pipeline as Code."}),"\n",(0,a.jsx)(n.p,{children:"Example Jenkinsfile (Declarative Pipeline):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-groovy",children:"pipeline {\n    agent {\n        docker {\n            image 'node:22' // Use a Node.js Docker image\n            args '-v /tmp:/tmp' // Mount host volume if needed for browser setup\n        }\n    }\n    // Alternatively, for a Freestyle project, configure build steps directly in the UI.\n    // For a traditional agent:\n    // agent any\n\n    environment {\n        # Example of setting environment variables\n        # BASE_URL = 'http://your-app.com'\n    }\n\n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n            }\n        }\n\n        stage('Install Dependencies') {\n            steps {\n                script {\n                    sh 'npm install'\n                }\n            }\n        }\n\n        stage('Install Chrome (if needed)') {\n            steps {\n                script {\n                    // Commands to install Google Chrome on the agent\n                    // This will depend on the base OS of your Jenkins agent or Docker image\n                    // For Debian/Ubuntu based systems in a Docker image:\n                    sh '''\n                        apt-get update && apt-get install -y \\\n                        wget \\\n                        gnupg \\\n                        apt-transport-https \\\n                        ca-certificates && \\\n                        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - && \\\n                        echo \"deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main\" > /etc/apt/sources.list.d/google-chrome.list && \\\n                        apt-get update && \\\n                        apt-get install -y google-chrome-stable\n                    '''\n                    // For other OS, adapt the commands.\n                }\n            }\n        }\n\n        stage('Run qavajs Tests') {\n            steps {\n                script {\n                    sh 'npm test' // Your qavajs test command\n                }\n            }\n        }\n\n        stage('Publish Test Results') {\n            steps {\n                script {\n                    // Assuming qavajs generates a JUnit XML report\n                    junit '**/junit-report.xml' // Path to your JUnit report\n                }\n                // Publish other artifacts like HTML reports\n                archiveArtifacts artifacts: 'reports/**/*', fingerprint: true\n            }\n        }\n    }\n\n    post {\n        always {\n            // Clean up any temporary files or directories if needed\n            script {\n                echo 'Cleaning up workspace...'\n            }\n        }\n        success {\n            echo 'qavajs tests completed successfully!'\n        }\n        failure {\n            echo 'qavajs tests failed!'\n        }\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);